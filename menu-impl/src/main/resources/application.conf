play.modules.enabled += com.knoldus.lagom.sample.restaurant.menu.MenuModule

lagom.persistence.ask-timeout = 30s
lagom.persistence.ask-timeout = ${?AKKA_TIMEOUT}

menu.cassandra.keyspace = menu
menu.cassandra.keyspace = ${?MENU_CASSANDRA_KEYSPACE}

cassandra.default {
  ## list the contact points  here
  contact-points = ["127.0.0.1", "127.0.0.1", "127.0.0.1"]
  contact-points = [${?CONTACT_POINT_ONE}, ${?CONTACT_POINT_TWO}, ${?CONTACT_POINT_THREE}]
  ## override Lagomâ€™s ServiceLocator-based ConfigSessionProvider
  session-provider = akka.persistence.cassandra.ConfigSessionProvider
}

cassandra-journal {
  contact-points = ${cassandra.default.contact-points}
  session-provider = ${cassandra.default.session-provider}
  keyspace = ${menu.cassandra.keyspace}
}

cassandra-snapshot-store {
  contact-points = ${cassandra.default.contact-points}
  session-provider = ${cassandra.default.session-provider}
  keyspace = ${menu.cassandra.keyspace}
}

lagom.persistence.read-side.cassandra {
  contact-points = ${cassandra.default.contact-points}
  session-provider = ${cassandra.default.session-provider}
  keyspace = ${menu.cassandra.keyspace}
}

lagom.circuit-breaker {
  default {
    # Enable/Disable circuit breaker.
    enabled = on

    # Number of failures before opening the circuit.
    max-failures = 10
    max-failures = ${?CIRCUIT_BREAKER_MAX_FAILURES}

    # Duration of time in open state after which to attempt to close
    # the circuit, by first entering the half-open state.
    reset-timeout = 30s
    reset-timeout = ${?CIRCUIT_BREAKER_RESET_TIMEOUT}

    # Duration of time after which to consider a call a failure.
    call-timeout = 30s
    call-timeout = ${?CIRCUIT_BREAKER_CALL_TIMEOUT}
  }
}

lagom.persistence.read-side {

  # how long should we wait when retrieving the last known offset
  offset-timeout = 5s
  offset-timeout = ${?LAGOM_PERSISTENCE_READ_SIDE_OFFSET_TIMEOUT}

  # Exponential backoff for failures in ReadSideProcessor
  failure-exponential-backoff {
    # minimum (initial) duration until processor is started again
    # after failure
    min = 3s
    min = ${?LAGOM_PERSISTENCE_READ_SIDE_FAILURE_EXPONENTIAL_BACKOFF_MIN}

    # the exponential back-off is capped to this duration
    max = 30s
    max = ${?LAGOM_PERSISTENCE_READ_SIDE_FAILURE_EXPONENTIAL_BACKOFF_MAX}

    # additional random delay is based on this factor
    random-factor = 1.2
    random-factor = ${?LAGOM_PERSISTENCE_READ_SIDE_FAILURE_EXPONENTIAL_BACKOFF_RANDOM_FACTOR}
  }

  # The amount of time that a node should wait for the global prepare callback to execute
  global-prepare-timeout = 30s
  global-prepare-timeout = ${?LAGOM_PERSISTENCE_READ_SIDE_GLOBAL_PREPARE_TIMEOUT}

  # Specifies that the read side processors should run on cluster nodes with a specific role.
  # If the role is not specified (or empty) all nodes in the cluster are used.
  run-on-role = ""
  run-on-role = ${?LAGOM_PERSISTENCE_READ_SIDE_RUN_ON_ROLE}

  # The Akka dispatcher to use for read-side actors and tasks.
  use-dispatcher = lagom.persistence.dispatcher
  use-dispatcher = ${?LAGOM_PERSISTENCE_READ_SIDE_USE_DISPATCHER}
}
